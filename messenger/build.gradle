import de.gesellix.gradle.docker.tasks.DockerBuildTask
import de.gesellix.gradle.docker.tasks.DockerTagTask
import de.gesellix.gradle.docker.tasks.GenericDockerTask

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.61'
    id 'application'
    id 'de.gesellix.docker' version '2019-12-16T09-02-32'
}

group 'ru.kotlin.sirius'
version '1.0-SNAPSHOT'
mainClassName = "io.ktor.server.netty.EngineMain"

repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
    maven { url 'https://kotlin.bintray.com/ktor' }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-reflect"
    implementation "io.ktor:ktor-server-netty:$ktor_version"
    implementation "io.ktor:ktor-server-core:$ktor_version"
    implementation "io.ktor:ktor-auth:$ktor_version"
    implementation "io.ktor:ktor-auth-jwt:$ktor_version"
    implementation "io.ktor:ktor-jackson:$ktor_version"
    implementation "ch.qos.logback:logback-classic:$logback_version"

    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-jackson:$retrofit_version"

    implementation "org.springframework.security:spring-security-config:$spring_security_version"

    implementation "org.jetbrains.exposed:exposed:0.17.7"
    implementation "com.h2database:h2:1.4.200"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_version"

    testImplementation "com.squareup.okhttp3:mockwebserver:4.3.1"
    testImplementation "io.ktor:ktor-server-tests:$ktor_version"
}

test {
    useJUnitPlatform()
}

docker {
    dockerHost = 'unix:///var/run/docker.sock'
}

def groupDocker = "docker"

ext.build = (project.hasProperty('teamcity')) ? project.teamcity['build.number'] : 'local_build'
version = ext.build.replaceAll("(\\S+)\\s*.*", "\$1")

ext {
    dockerRegistry = "300712256265.dkr.ecr.eu-north-1.amazonaws.com"
    productName = "kotlin-messenger"
    dockerImageName = "demo/$productName"
    dockerImageAndTag = "$dockerImageName:$version"
    remoteDockerImageAndTag = "$dockerImageName:$version"
}

task buildLocalDockerImage(type: DockerBuildTask) {
    dependsOn installDist
    group = groupDocker
    buildParams = [
            'nocache'  : 'true'
    ]
    imageName = dockerImageAndTag
    buildContextDirectory = file(".")
    doFirst {
        println("Building docker image $imageName ...")
    }
}

task tagDockerImage(type: DockerTagTask) {
    dependsOn buildLocalDockerImage
    group = null
    imageId = dockerImageAndTag
    tag = "$dockerRegistry/$remoteDockerImageAndTag"
    doFirst {
        println("Tag docker image $imageId as $tag ...")
    }
}

task pushDockerImageToRegistry(type: Exec) {
    dependsOn tagDockerImage
    executable "sh"
    group = groupDocker
    args "-c", "/usr/bin/docker push $dockerRegistry/$remoteDockerImageAndTag"
}

task removeLocalDockerImages(type: GenericDockerTask) {
    group = groupDocker
    doFirst {
        println("Removing local images : $dockerImageAndTag, $remoteDockerImageAndTag and $dockerRegistry/$remoteDockerImageAndTag ...")
    }
    doLast {
        def docker = getDockerClient()
        docker.rmi(dockerImageAndTag)
        docker.rmi(remoteDockerImageAndTag)
        docker.rmi("$dockerRegistry/$remoteDockerImageAndTag")
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions.freeCompilerArgs += ["-Xuse-experimental=io.ktor.util.KtorExperimentalAPI"]
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions.freeCompilerArgs += ["-Xuse-experimental=io.ktor.util.KtorExperimentalAPI"]
}
